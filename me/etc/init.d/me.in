#!/bin/sh
#
#
# me    This shell script takes care of starting and stopping
#       me (ovis model engine daemon).
#
# chkconfig: - 98 0
# description: me is an ovis daemon.
#
### BEGIN INIT INFO
# Provides: me
# Required-Start:
# Defalt-Start: 2 3 4 5
# Default-Stop: 0 1 6
# Description: me init script
### END INIT INFO


. /etc/profile.d/set-ovis-variables.sh
. /etc/ovis/ovis-functions.sh

if [ -z $OVIS_HOME ]; then
	OVIS_HOME=@prefix@
	echo "OVIS_HOME not defined, using default of $OVIS_HOME"
fi

if [ ! -d $OVIS_HOME ]; then
	echo "OVIS_HOME: $OVIS_HOME is not a directory"
	exit 1
fi

# Source function library.
if [ -f /lib/lsb/init-functions ] ; then
	. /lib/lsb/init-functions
	STATUS=status_of_proc
fi

if [ -f /etc/init.d/functions ] ; then
	. /etc/init.d/functions
	STATUS=status
else
	echo_success() {
		echo 'success'
	}
	echo_failure() {
		echo 'failure'
	}
fi

RETVAL=0
prog="me"
ME=$OVIS_HOME/sbin/me
if [ -z $ME_XPORT ] ; then
	ME_XPORT=sock
	echo "ME_XPORT not set using default of $ME_XPORT"
fi
if [ -z $ME_PORT_TO_OCMD ] ; then
	ME_PORT_TO_OCMD=41001
	echo "ME_PORT_TO_OCMD not set using default of $ME_PORT_TO_OCMD"
fi
if [ -z $ME_PORT_LISTEN ] ; then
	ME_PORT_LISTEN=60001
	echo "ME_PORT_LISTEN not set using default of $ME_PORT_LISTEN"
fi

lockfile=$OVIS_HOME/var/lock/$prog.lock
pidfile=$OVIS_HOME/var/pid/$prog.pid

mkdir -p $(dirname $lockfile)
mkdir -p $(dirname $pidfile)
mkdir -p $OVIS_SOCK/
mkdir -p $OVIS_LOG/
SOCK=$OVIS_SOCK/me.ctrl
LOG=$OVIS_LOG/me.log

status -p $pidfile -l $(basename $lockfile) master >/dev/null 2>&1
running=$?

start() {
	echo -n "Starting $prog: "

	# Check running instance
	pid=`get_pid $ME`
	if [ $pid ] ; then
		echo -n "ME is already running: "
		echo_failure
		echo
		exit 1
	fi

	rm -f $SOCK
	archive_log $LOG

	#Start me
	$ME -S $SOCK -l $LOG -x $ME_XPORT:$ME_PORT_LISTEN -O $ME_PORT_TO_OCMD  $@

	RETVAL=$?
	if [ $RETVAL -eq 0 ] ; then
		sleep 1;
		pid=`get_pid $ME`
		if [ $pid ] && [ -d /proc/$pid ] ; then
			echo $pid > $pidfile
			echo_success
			echo
		else
			echo_failure
			echo
		fi
	else
		echo_failure
		echo
	fi
}

stop() {
	echo -n "Stopping $prog: "
	if [ -f $pidfile ]; then
		pid=`cat $pidfile`
	else
		echo "pidfile of $pidfile doesn't exists, using ps"
		pid=`get_pid $ME`
	fi

	if [ ! $pid ]; then
		echo "Cannot obtain pid ..."
		echo_failure
		echo
		exit 1
	else
		kill $pid
	fi

	if ps -p $pid >/dev/null 2>&1 ; then
		echo_failure
	else
		echo_success
		rm -f $lockfile
		rm -f $pidfile
	fi
	echo
}

dostatus() {
	$STATUS -p $pidfile $ME $ME
}

restart() {
	stop
	start
}

# See how we were called.
case "$1" in
  start)
	start
	;;
  stop)
	stop
	;;
  status)
	dostatus
	;;
  restart|reload)
	restart
	;;
  *)
	echo "Usage: $0 {start|stop|status|restart|reload}"
	exit 3
esac

exit $RETVAL

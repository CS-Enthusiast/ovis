#!/usr/bin/env python
from __future__ import print_function
import argparse
import sys
from ovis_lib import TADA
import time
import json

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Run an FVT test")
    parser.add_argument("--cfg", help="JSON formatted test definition", required=True)
    parser.add_argument("--data_root", required=True, help="The test data root path")
    parser.add_argument("--tada_addr",
                        help="The test automation server host and port as host:port.",
                        default="tada-host:9862")
    parser.add_argument("--prefix",
                        help="The directory where the test target is installed.",
                        default="/opt/ovis")

    args = parser.parse_args()

    test = TADA.Test(args.cfg, args.prefix, args.data_root, args.tada_addr)
    rc = test.start()

    # Give the daemons a few seconds to start
    time.sleep(5)

    # Send data to the stream sampler
    host_a = test.get_host('stream-sampler-1')
    data = { "schema" : "stream_test",
             "timestamp" : 1559242264,
             "data" : {
                 "id" : 12345,
                 "list" : [ 1, 2, 3, 4 ]
             }
         }

    data_file = args.data_root + "/Stream_Test-data.json"
    s = json.dumps(data)
    f = open(data_file, 'w')
    f.write(s)
    f.close()
    data_file = '/data/' + host_a.hostname + '-data.json'

    # Test a JSON formatted stream
    for host, cont in test.servers():
        rc, out = host_a.exec_run("ldmsd_stream_publish -h {host} -x {xprt} -p {port} "
                                  " -a {auth} -s test_stream -t json -f {fname}"
                                  .format(fname=data_file,
                                          host=host,
                                          xprt=cont.listen_xprt,
                                          port=cont.listen_port,
                                          auth=cont.auth_name
                                      ))
        print(out)

    # Test a STRING formatted stream
    rc, out = host_a.exec_run("ldmsd_stream_publish -h {host} -x {xprt} -p {port} "
                              " -a {auth} -s test_stream -t string -f {fname}"
                              .format(fname=data_file,
                                      host=host_a.hostname,
                                      xprt=host_a.listen_xprt,
                                      port=host_a.listen_port,
                                      auth=host_a.auth_name
                                  ))
    print(out)

    test.cleanup()

import argparse
from datetime import datetime
import time

def parse_time_range(time_range_str):
    # Split the input string by the colon
    start_str, end_str = time_range_str.split(':')

    def parse_time(t_str):
        # Try to parse the unix timestamp first
        try:
            return datetime.fromtimestamp(float(t_str))
        except ValueError:
            # If not a Unix timestamp, try parsing as a human-readable date-time
            return datetime.strptime(t_str, "%Y-%m-%d %H:%M:%S")

    start_time = parse_time(start_str)
    end_time = parse_time(end_str)

    # Convert datetime objects back to Unix timestamps if needed
    start_timestamp = start_time.timestamp()
    end_timestamp = end_time.timestamp()

    return start_timestamp, end_timestamp

def setup_arguments(parser):
    # Node Specification
    parser.add_argument('--node', '-n', help='Specify a particular node for node-centric visualizations.')
    # Time Range Filter
    parser.add_argument('--time-range', '-t', type=parse_time_range, help='Filter the data to a specific time range for the visualization.')
    # Verbose Output
    parser.add_argument('--verbose', '-v', action='store_true', help='Provide more detailed output about the visualization generation process.')
    # Version Display
    parser.add_argument('--version', action='version', version='LDMSV 1.0', help='Display the version of the ldmsv tool.')
    # Metrics Specification
    parser.add_argument('--metrics', '-m', help='Specify which metrics to include in the visualization.')
    # Job ID Specification
    parser.add_argument('--jobid', '-j', help='Specify the job ID for job-centric visualizations.')
    # Visualization Type
    parser.add_argument('--type', '-t', choices=['node-timeline', 'job-timeline', 'io-timeline'], help='Specify the type of visualization to be generated.')
    # Storage Path
    parser.add_argument('--store', '-s', help='Specify the path where the OTF2 file is stored.')
    # OTF2 File Naming
    parser.add_argument('--name', help='Specify the name of the OTF2 file generated by the command.')
    # Logging
    parser.add_argument('--log', '-l', help='Specify the location for logging the process of visualization generation.')
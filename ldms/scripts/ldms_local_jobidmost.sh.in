#!/bin/bash

# NOTE: replace the two vars below with your paths
# NOTE: change ports, intervals if you like
DESTDIR=
allowroot=0
prefix=@prefix@
exec_prefix=@exec_prefix@
libdir=@libdir@
BUILDDIR=@prefix@
# Manually redefine portbase to avoid collisions.
# Base should be above the maximum in :
#  cat /proc/sys/net/ipv4/ip_local_port_range
# and below 65530 or below the minimum and above 1024
portbase=61100
port1=`expr $portbase + 1`
port2=`expr $portbase + 2`
port3=`expr $portbase + 3`
if test ! -x $BUILDDIR/sbin/ldmsd; then
	echo "can't find ldmsd binary. set destdir in $0 before testing?"
	exit 1
fi
case "x$USER" in
	x)
	echo "must be run in user environment. USER not set"
	exit 1
	;;
	xroot)
	echo "must be run in user environment. root detected."
	echo "killing other folks ldmsd might be a bad idea"
	echo "change allowroot in $0 to override this check."
	exit 1
	;;
esac
function mysleep() {
	echo -n sleep $1 ... 
	sleep $1
	echo done
}

# use our pid in dirname to prevent collisions in dir & file naming
TESTDIR=/tmp/$USER/ldmstest/$$
STOREDIR=$TESTDIR/store
SOCKDIR=$TESTDIR/run/ldmsd
SLURMFILE=$TESTDIR/run/ldms.slurm.jobid
SLURMCOL=slurm.jobid
LOGDIR=$TESTDIR/logs
export LDMSD_PIDFILE=$TESTDIR/run/ldmsd.pid
SECRET=$SOCKDIR/secret
export TSAN_OPTIONS=verbosity=1:log_path=$LOGDIR:strip_path_prefix=$prefix
export ASAN_OPTIONS=verbosity=1:log_path=$LOGDIR:detect_stack_use_after_return=1:detect_leaks=1:strip_path_prefix=$prefix
export LDMSD_SOCKPATH=${TESTDIR}/run
mkdir -p $STOREDIR $SOCKDIR $LOGDIR $LDMSD_SOCKPATH
echo "secretword=crashtestdummy" > $SECRET
export LDMS_AUTH_FILE=$SECRET
chmod go-rwx $SECRET
echo "logs and data stored under $TESTDIR"

export LD_LIBRARY_PATH=${BUILDDIR}/lib:@libdir@:@pkglibdir@:@libeventpath@:$LD_LIBRARY_PATH
export ZAP_LIBPATH=@pkglibdir@
export PATH=${BUILDDIR}/sbin:$PATH
export LDMSD_PLUGIN_LIBPATH=@pkglibdir@

# whack the daemons we own
pkill ldmsd
mysleep 1
echo "Listing ldmsd's still running:"
pgrep ldmsd
echo "Done."

echo removing old logs
rm -f ${LOGDIR}/1.txt
rm -f ${LOGDIR}/2.txt
rm -f ${LOGDIR}/3.txt

echo removing old output
rm -rf ${STOREDIR}/node
rm -f ${STOREDIR}/*

echo Starting daemons
ldmsd -x sock:$port1 -S $SOCKDIR/metric_socket_1  -l ${LOGDIR}/1.txt -v DEBUG -r $LDMSD_PIDFILE.1
ldmsd -x sock:$port2 -S $SOCKDIR/metric_socket_2  -l ${LOGDIR}/2.txt -v DEBUG -r $LDMSD_PIDFILE.2
ldmsd -x sock:$port3 -S $SOCKDIR/metric_socket_3  -l ${LOGDIR}/3.txt -v DEBUG -r $LDMSD_PIDFILE.3
mysleep 1

containers="clock meminfo vmstat procstat procnetdev procinterrupts"
server_containers="procnfs sysclassib"

for i in 1 2; do
	echo Starting plugins on daemon$i
	echo JOBID=1000$i > $SLURMFILE.$i
	echo "load name=jobid" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_$i
	echo "config name=jobid producer=localhost$i schema=jobid instance=localhost$i/jobid component_id=$i file=$SLURMFILE.$i ifaces=wlan0,lo" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_$i
	echo "start name=jobid interval=1000000 offset=-100000" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_$i
# add $server_containers to the iterator next if on a cluster host w/ib, nfs
	for c in $containers; do
		echo loading $c
		echo "load name=$c" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_$i
		echo "config name=$c producer=localhost$i schema=$c instance=localhost$i/$c component_id=$i with_jobid=1" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_$i
		echo "start name=$c interval=1000000 offset=0" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_$i
	done
done
mysleep 2

# ldms_ls -h localhost -x sock -p $port3 -l

for i in 1 2; do
	echo Adding host$i to aggregator3
	setlist="localhost$i/jobid"
	for c in $containers; do
		setlist="$setlist,localhost$i/$c"
	done
	echo "add host=localhost type=active xprt=sock interval=1000000 port=6110$i sets=$setlist" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
	mysleep 1
done

mysleep 5
echo Adding store_csv to aggregator3
echo "load name=store_csv" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
mysleep 2
echo "config name=store_csv action=init path=${STOREDIR} altheader=1" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
for c in jobid $containers; do
	echo "store name=store_csv action=custom schema=$c policy=$c container=$c" | ${BUILDDIR}/sbin/ldmsctl -S $SOCKDIR/metric_socket_3
done
mysleep 2
#
echo ldms_ls on host 3:
ldms_ls -h localhost -x sock -p $port3 

echo rescheduling jobs
for i in 1 2; do
	echo JOBID=0 > $SLURMFILE.$i
	mysleep 2
	echo JOBID=2000$i > $SLURMFILE.$i
	echo UID=12345 >> $SLURMFILE.$i
done
sleep 3
# ldms_ls -h localhost -x sock -p $port1 -l
for i in 1 2; do
	echo JOBID=0 > $SLURMFILE.$i
	mysleep 2
	echo JOBID=3000$i > $SLURMFILE.$i
	echo UID=12346 >> $SLURMFILE.$i
	echo USER=bob >> $SLURMFILE.$i
done
mysleep 3
echo ldms_ls on host 1:
ldms_ls -h localhost -x sock -p $port1 -l
mysleep 1
echo ldms_ls on host 2:
ldms_ls -h localhost -x sock -p $port2 -l
mysleep 1
echo ldms_ls on host 3:
ldms_ls -h localhost -x sock -p $port3 
pkill ldmsd
mysleep 2
echo data from ${STOREDIR}/node/jobid sorted by node id
cat ${STOREDIR}/jobid/* | grep ' 1, '
cat ${STOREDIR}/jobid/* | grep ' 2, '

mysleep 1
for i in 1 2 3; do
	kill -SIGTERM `cat $LDMSD_PIDFILE.$i`
done
echo "logs and data stored under $TESTDIR"
echo done;
